<?php

/**
 * @file
 * Install/update module.
 */

use Drupal\Core\Config\FileStorage;

/**
 * Import action config.
 *
 * @param array<string, mixed> $sandbox
 *   The sandbox array for batch processing.
 */
function schwab_content_sync_update_9121(array &$sandbox): void {
  // Get file storage of optional configs in the module.
  $module_handler = \Drupal::moduleHandler();
  $config_path = $module_handler->getModule('schwab_content_sync')->getPath() . '/config/install';
  $source = new FileStorage($config_path);

  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $config_names = [
    'system.action.content_bulk_export',
  ];

  foreach ($config_names as $config_name) {
    $data = $source->read($config_name);
    if ($data !== FALSE) {
      $config_storage->write($config_name, $data);
    }
  }
}

/**
 * Init module settings config.
 *
 * @param array<string, mixed> $sandbox
 *   The sandbox array for batch processing.
 */
function schwab_content_sync_update_9130(array &$sandbox): void {
  // Get file storage of optional configs in the module.
  $module_handler = \Drupal::moduleHandler();
  $config_path = $module_handler->getModule('schwab_content_sync')->getPath() . '/config/install';
  $source = new FileStorage($config_path);

  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $config_names = [
    'schwab_content_sync.settings',
  ];

  foreach ($config_names as $config_name) {
    $data = $source->read($config_name);
    if ($data !== FALSE) {
      $config_storage->write($config_name, $data);
    }
  }
}

/**
 * Update configuration to support bundles.
 */
function schwab_content_sync_update_9131(): void {
  $config = \Drupal::configFactory()
    ->getEditable('schwab_content_sync.settings');
  $allowed_entity_types = $config->get('allowed_entity_types');
  
  if (is_array($allowed_entity_types)) {
    foreach ($allowed_entity_types as &$allowed_type) {
      $allowed_type = [];
    }
    $config->set('allowed_entity_types', $allowed_entity_types)->save();
  }
}

/**
 * Update module configuration with 'Site UUID check' setting.
 *
 * @param array<string, mixed> $sandbox
 *   The sandbox array for batch processing.
 */
function schwab_content_sync_update_9132(array &$sandbox): void {
  \Drupal::configFactory()->getEditable('schwab_content_sync.settings')
    ->set('site_uuid_check', TRUE)
    ->save();
}

/**
 * Restructure schwab_content_sync.setting:allowed_entity_types.
 *
 * @param array<string, mixed> $sandbox
 *   The sandbox array for batch processing.
 */
function schwab_content_sync_update_9133(array &$sandbox): void {
  $config = \Drupal::configFactory()->getEditable('schwab_content_sync.settings');
  $existing_allowed_types = $config->get('allowed_entity_types');
  
  if (is_array($existing_allowed_types)) {
    $allowed_entity_types = [];
    foreach ($existing_allowed_types as $entity_type => $bundles) {
      if (is_array($bundles)) {
        $allowed_entity_types[$entity_type] = array_keys($bundles);
      } else {
        $allowed_entity_types[$entity_type] = [];
      }
    }
    $config->set('allowed_entity_types', $allowed_entity_types);
    $config->save(TRUE);
  }
}

/**
 * Update module configuration with 'Import/export directory schema' setting.
 *
 * @param array<string, mixed> $sandbox
 *   The sandbox array for batch processing.
 */
function schwab_content_sync_update_9134(array &$sandbox): void {
  // Set the value that was previously hardcoded.
  \Drupal::configFactory()->getEditable('schwab_content_sync.settings')
    ->set('import_directory_schema', 'temporary')
    ->set('export_directory_schema', 'temporary')
    ->save();
}